    
/**
    Objective function of fluid
*/
double obj_um_fluid(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_fluid(SS_ref_db,x);

    
    sf[0]          = 1.0*x[0];
    sf[1]          = 1.0 - x[0];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(sf[0]));
    mu[1]          = gb[1] + R*T*creal(clog(sf[1]));
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_fluid(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of ol
*/
double obj_um_ol(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_ol(SS_ref_db,x);

    for (int i = 0; i < n_em; i++){
        mu_Gex[i] = 0.0;
        int it    = 0;
        for (int j = 0; j < d->n_xeos; j++){
            for (int k = j+1; k < n_em; k++){
                mu_Gex[i] -= (d->eye[i][j] - d->p[j])*(d->eye[i][k] - d->p[k])*(d->W[it]);
                it += 1;
            }
        }
    }
    
    sf[0]          = 1.0 - x[0];
    sf[1]          = 1.0*x[0];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(cpow(sf[0], 2.0))) + mu_Gex[0];
    mu[1]          = gb[1] + R*T*creal(clog(cpow(sf[1], 2.0))) + mu_Gex[1];
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_ol(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of br
*/
double obj_um_br(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_br(SS_ref_db,x);

    
    sf[0]          = 1.0 - x[0];
    sf[1]          = 1.0*x[0];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(sf[0]));
    mu[1]          = gb[1] + R*T*creal(clog(sf[1]));
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_br(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of ch
*/
double obj_um_ch(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_ch(SS_ref_db,x);

    for (int i = 0; i < n_em; i++){
        mu_Gex[i] = 0.0;
        int it    = 0;
        for (int j = 0; j < d->n_xeos; j++){
            for (int k = j+1; k < n_em; k++){
                mu_Gex[i] -= (d->eye[i][j] - d->p[j])*(d->eye[i][k] - d->p[k])*(d->W[it]);
                it += 1;
            }
        }
    }
    
    sf[0]          = 1.0 - x[0];
    sf[1]          = 1.0*x[0];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(cpow(sf[0], 9.0))) + mu_Gex[0];
    mu[1]          = gb[1] + R*T*creal(clog(cpow(sf[1], 9.0))) + mu_Gex[1];
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_ch(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of atg
*/
double obj_um_atg(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_atg(SS_ref_db,x);

    for (int i = 0; i < n_em; i++){
        mu_Gex[i] = 0.0;
        int it    = 0;
        for (int j = 0; j < d->n_xeos; j++){
            for (int k = j+1; k < n_em; k++){
                mu_Gex[i] -= (d->eye[i][j] - d->p[j])*(d->eye[i][k] - d->p[k])*(d->W[it]);
                it += 1;
            }
        }
    }
    
    sf[0]          = 1.0*x[0]*x[1] + 1.0*x[0]*x[2] - x[0] - x[1]*x[3] - x[1] - x[2]*x[3] - x[2] + 1.0*x[3] + 1.0;
    sf[1]          = -x[0]*x[1] - x[0]*x[2] + 1.0*x[0] + 1.0*x[1]*x[3] + 1.0*x[2]*x[3] - x[3];
    sf[2]          = 1.0*x[2];
    sf[3]          = 1.0*x[1];
    sf[4]          = -x[0] + 0.5*x[1]*x[3] + 0.5*x[2]*x[3] - 0.5*x[3] + 1.0;
    sf[5]          = 1.0*x[0] - 0.5*x[1]*x[3] - 0.5*x[2]*x[3] + 0.5*x[3];
    sf[6]          = -0.5*x[1] - 0.5*x[2] + 1.0;
    sf[7]          = 0.5*x[1] + 0.5*x[2];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(sf[0]*cpow(sf[4], 2.0)*cpow(sf[6], 2.0))) + mu_Gex[0];
    mu[1]          = gb[1] + R*T*creal(clog(sf[1]*cpow(sf[5], 2.0)*cpow(sf[6], 2.0))) + mu_Gex[1];
    mu[2]          = gb[2] + R*T*creal(clog(sf[1]*cpow(sf[4], 2.0)*cpow(sf[6], 2.0))) + mu_Gex[2];
    mu[3]          = gb[3] + R*T*creal(clog(4.0*sf[3]*cpow(sf[4], 2.0)*sf[6]*sf[7])) + mu_Gex[3];
    mu[4]          = gb[4] + R*T*creal(clog(4.0*sf[2]*cpow(sf[4], 2.0)*sf[6]*sf[7])) + mu_Gex[4];
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_atg(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of g
*/
double obj_um_g(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_g(SS_ref_db,x);

    for (int i = 0; i < n_em; i++){
        mu_Gex[i] = 0.0;
        int it    = 0;
        for (int j = 0; j < d->n_xeos; j++){
            for (int k = j+1; k < n_em; k++){
                mu_Gex[i] -= (d->eye[i][j] - d->p[j])*(d->eye[i][k] - d->p[k])*(d->W[it]);
                it += 1;
            }
        }
    }
    
    sf[0]          = 1.0 - x[0];
    sf[1]          = 1.0*x[0];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(cpow(sf[0], 3.0))) + mu_Gex[0];
    mu[1]          = gb[1] + R*T*creal(clog(cpow(sf[1], 3.0))) + mu_Gex[1];
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_g(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of ta
*/
double obj_um_ta(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_ta(SS_ref_db,x);

    for (int i = 0; i < n_em; i++){
        mu_Gex[i] = 0.0;
        int it    = 0;
        for (int j = 0; j < d->n_xeos; j++){
            for (int k = j+1; k < n_em; k++){
                mu_Gex[i] -= (d->eye[i][j] - d->p[j])*(d->eye[i][k] - d->p[k])*(d->W[it]);
                it += 1;
            }
        }
    }
    
    sf[0]          = 1.0*x[0]*x[3] - x[0] - x[3]*x[4] - x[3] + 1.0*x[4] + 1.0;
    sf[1]          = -x[0]*x[3] + 1.0*x[0] + 1.0*x[3]*x[4] - x[4];
    sf[2]          = 1.0*x[3];
    sf[3]          = 1.0*x[0]*x[1] + 1.0*x[0]*x[2] - x[0] - x[1] - x[2] + 0.5*x[3]*x[4] - 0.5*x[4] + 1.0;
    sf[4]          = -x[0]*x[1] - x[0]*x[2] + 1.0*x[0] - 0.5*x[3]*x[4] + 0.5*x[4];
    sf[5]          = 1.0*x[2];
    sf[6]          = 1.0*x[1];
    sf[7]          = -x[1] - x[2] + 1.0*x[3] + 1.0;
    sf[8]          = 1.0*x[1] + 1.0*x[2] - x[3];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(sf[0]*cpow(sf[3], 2.0)*cpow(sf[7], 2.0))) + mu_Gex[0];
    mu[1]          = gb[1] + R*T*creal(clog(sf[1]*cpow(sf[4], 2.0)*cpow(sf[7], 2.0))) + mu_Gex[1];
    mu[2]          = gb[2] + R*T*creal(clog(sf[0]*cpow(sf[4], 2.0)*cpow(sf[7], 2.0))) + mu_Gex[2];
    mu[3]          = gb[3] + R*T*creal(clog(16.0*sf[0]*sf[3]*sf[6]*sf[7]*sf[8])) + mu_Gex[3];
    mu[4]          = gb[4] + R*T*creal(clog(16.0*sf[0]*sf[3]*sf[5]*sf[7]*sf[8])) + mu_Gex[4];
    mu[5]          = gb[5] + R*T*creal(clog(sf[2]*cpow(sf[6], 2.0)*cpow(sf[7], 2.0))) + mu_Gex[5];
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_ta(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of chl
*/
double obj_um_chl(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_chl(SS_ref_db,x);

    for (int i = 0; i < n_em; i++){
        mu_Gex[i] = 0.0;
        int it    = 0;
        for (int j = 0; j < d->n_xeos; j++){
            for (int k = j+1; k < n_em; k++){
                mu_Gex[i] -= (d->eye[i][j] - d->p[j])*(d->eye[i][k] - d->p[k])*(d->W[it]);
                it += 1;
            }
        }
    }
    
    sf[0]          = 1.0*x[0]*x[1] + 1.0*x[0]*x[3] - x[0]*x[4] - x[0] - x[1]*x[5] - x[1] - x[3]*x[5] - x[3] + 1.0*x[4]*x[5] + 1.0*x[4] + 1.0*x[5] + 1.0;
    sf[1]          = 1.0*x[3];
    sf[2]          = -x[0]*x[1] - x[0]*x[3] + 1.0*x[0]*x[4] + 1.0*x[0] + 1.0*x[1]*x[5] + 1.0*x[3]*x[5] - x[4]*x[5] - x[5];
    sf[3]          = 1.0*x[1] - x[4];
    sf[4]          = 1.0*x[0]*x[3] - x[0] + 0.25*x[1]*x[5] + 0.25*x[1]*x[6] + 0.25*x[2]*x[6] + 0.25*x[3]*x[5] - x[3] - 0.25*x[4]*x[5] + 0.25*x[4]*x[6] - 0.25*x[5] - 0.25*x[6] + 1.0;
    sf[5]          = 1.0*x[3];
    sf[6]          = -x[0]*x[3] + 1.0*x[0] - 0.25*x[1]*x[5] - 0.25*x[1]*x[6] - 0.25*x[2]*x[6] - 0.25*x[3]*x[5] + 0.25*x[4]*x[5] - 0.25*x[4]*x[6] + 0.25*x[5] + 0.25*x[6];
    sf[7]          = 1.0*x[0]*x[1] + 1.0*x[0]*x[2] + 1.0*x[0]*x[4] - x[0] - x[1]*x[6] - x[1] - x[2]*x[6] - x[2] - x[4]*x[6] - x[4] + 1.0*x[6] + 1.0;
    sf[8]          = -x[0]*x[1] - x[0]*x[2] - x[0]*x[4] + 1.0*x[0] + 1.0*x[1]*x[6] + 1.0*x[2]*x[6] + 1.0*x[4]*x[6] - x[6];
    sf[9]          = 1.0*x[2];
    sf[10]          = 1.0*x[1] + 1.0*x[4];
    sf[11]          = -x[1] - 0.5*x[2] + 1.0;
    sf[12]          = 1.0*x[1] + 0.5*x[2];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(4.0*sf[0]*sf[10]*sf[11]*sf[12]*cpow(sf[4], 4.0))) + mu_Gex[0];
    mu[1]          = gb[1] + R*T*creal(clog(sf[0]*cpow(sf[11], 2.0)*cpow(sf[4], 4.0)*sf[7])) + mu_Gex[1];
    mu[2]          = gb[2] + R*T*creal(clog(sf[10]*cpow(sf[12], 2.0)*sf[3]*cpow(sf[4], 4.0))) + mu_Gex[2];
    mu[3]          = gb[3] + R*T*creal(clog(4.0*sf[10]*sf[11]*sf[12]*sf[2]*cpow(sf[6], 4.0))) + mu_Gex[3];
    mu[4]          = gb[4] + R*T*creal(clog(sf[0]*cpow(sf[11], 2.0)*cpow(sf[6], 4.0)*sf[8])) + mu_Gex[4];
    mu[5]          = gb[5] + R*T*creal(clog(cpow(sf[11], 2.0)*sf[2]*cpow(sf[4], 4.0)*sf[7])) + mu_Gex[5];
    mu[6]          = gb[6] + R*T*creal(clog(4.0*sf[0]*sf[11]*sf[12]*cpow(sf[4], 4.0)*sf[9])) + mu_Gex[6];
    mu[7]          = gb[7] + R*T*creal(clog(4.0*sf[10]*sf[11]*sf[12]*sf[1]*cpow(sf[5], 4.0))) + mu_Gex[7];
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_chl(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of anth
*/
double obj_um_anth(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mat_phi   = d->mat_phi;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_anth(SS_ref_db,x);

    d->sum_v = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_v += d->p[i]*d->v[i];
    }
    for (int i = 0; i < n_em; i++){
        d->mat_phi[i] = (d->p[i]*d->v[i])/d->sum_v;
    }
    
    for (int i = 0; i < d->n_em; i++){
        mu_Gex[i] = 0.0;
        int it = 0;
        for (int j = 0; j < d->n_xeos; j++){
            for (int k = j+1; k < d->n_em; k++){
                mu_Gex[i] -= (d->eye[i][j] - d->mat_phi[j])*(d->eye[i][k] - d->mat_phi[k])*(d->W[it]*2.0*d->v[i]/(d->v[j]+d->v[k]));
                it += 1;
            }
        }
    }
    
    sf[0]          = 1.0 - x[3];
    sf[1]          = 1.0*x[3];
    sf[2]          = 1.0*x[4];
    sf[3]          = 1.0*x[2];
    sf[4]          = 1.0*x[0]*x[2] + 1.0*x[0]*x[4] - x[0] + 1.0*x[1]*x[6] - x[2] - x[4] - 1.5*x[5] - x[6] + 1.0;
    sf[5]          = -x[0]*x[2] - x[0]*x[4] + 1.0*x[0] - x[1]*x[6] + 1.5*x[5] + 1.0*x[6];
    sf[6]          = -x[0] + 1.0*x[5] + 1.0;
    sf[7]          = 1.0*x[0] - x[5];
    sf[8]          = 1.0*x[1];
    sf[9]          = 1.0*x[0]*x[1] - x[0] - x[1]*x[6] - x[1] + 1.0*x[6] + 1.0;
    sf[10]          = -x[0]*x[1] + 1.0*x[0] + 1.0*x[1]*x[6] - x[6];
    sf[11]          = 0.5*x[1] - 0.5*x[2] + 0.25*x[3];
    sf[12]          = -0.5*x[1] + 0.5*x[2] - 0.25*x[3] + 1.0;
    
    
    mu[0]          = gb[0] + R*T*creal(clog(sf[0]*sf[12]*cpow(sf[4], 2.0)*cpow(sf[6], 3.0)*cpow(sf[9], 2.0))) + mu_Gex[0];
    mu[1]          = gb[1] + R*T*creal(clog(2.0*sf[0]*sqrt(sf[11])*sqrt(sf[12])*cpow(sf[4], 2.0)*cpow(sf[6], 3.0)*cpow(sf[8], 2.0))) + mu_Gex[1];
    mu[2]          = gb[2] + R*T*creal(clog(8.0*sqrt(sf[11])*sqrt(sf[12])*sf[1]*cpow(sf[4], 2.0)*cpow(sf[6], 3.0)*sf[8]*sf[9])) + mu_Gex[2];
    mu[3]          = gb[3] + R*T*creal(clog(sf[0]*sf[12]*cpow(sf[3], 2.0)*cpow(sf[6], 3.0)*cpow(sf[8], 2.0))) + mu_Gex[3];
    mu[4]          = gb[4] + R*T*creal(clog(sf[0]*sf[12]*cpow(sf[2], 2.0)*cpow(sf[6], 3.0)*cpow(sf[9], 2.0))) + mu_Gex[4];
    mu[5]          = gb[5] + R*T*creal(clog(sf[0]*cpow(sf[10], 2.0)*sf[12]*cpow(sf[5], 2.0)*cpow(sf[7], 3.0))) + mu_Gex[5];
    mu[6]          = gb[6] + R*T*creal(clog(sf[0]*cpow(sf[10], 2.0)*sf[12]*cpow(sf[5], 2.0)*cpow(sf[6], 3.0))) + mu_Gex[6];
    mu[7]          = gb[7] + R*T*creal(clog(sf[0]*sf[12]*cpow(sf[5], 2.0)*cpow(sf[7], 3.0)*cpow(sf[9], 2.0))) + mu_Gex[7];
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_anth(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of spi
*/
double obj_um_spi(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_spi(SS_ref_db,x);

    for (int i = 0; i < n_em; i++){
        mu_Gex[i] = 0.0;
        int it    = 0;
        for (int j = 0; j < d->n_xeos; j++){
            for (int k = j+1; k < n_em; k++){
                mu_Gex[i] -= (d->eye[i][j] - d->p[j])*(d->eye[i][k] - d->p[k])*(d->W[it]);
                it += 1;
            }
        }
    }
    
    sf[0]          = 1.0*x[1];
    sf[1]          = 1.0 - x[1];
    sf[2]          = 1.0 - x[0];
    sf[3]          = 1.0*x[0];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(sf[0]*sf[3])) + mu_Gex[0];
    mu[1]          = gb[1] + R*T*creal(clog(sf[0]*sf[2])) + mu_Gex[1];
    mu[2]          = gb[2] + R*T*creal(clog(sf[1]*sf[3])) + mu_Gex[2];
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_spi(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of opx
*/
double obj_um_opx(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_opx(SS_ref_db,x);

    for (int i = 0; i < n_em; i++){
        mu_Gex[i] = 0.0;
        int it    = 0;
        for (int j = 0; j < d->n_xeos; j++){
            for (int k = j+1; k < n_em; k++){
                mu_Gex[i] -= (d->eye[i][j] - d->p[j])*(d->eye[i][k] - d->p[k])*(d->W[it]);
                it += 1;
            }
        }
    }
    
    sf[0]          = 1.0*x[0]*x[1] + 1.0*x[0]*x[2] - x[0] - x[1] - x[2] + 0.5*x[3] + 1.0;
    sf[1]          = -x[0]*x[1] - x[0]*x[2] + 1.0*x[0] - 0.5*x[3];
    sf[2]          = 1.0*x[2];
    sf[3]          = 1.0*x[1];
    sf[4]          = -x[0] - 0.5*x[3] + 1.0;
    sf[5]          = 1.0*x[0] + 0.5*x[3];
    sf[6]          = 0.5*x[1] + 0.5*x[2];
    sf[7]          = -0.5*x[1] - 0.5*x[2] + 1.0;
    
    
    mu[0]          = gb[0] + R*T*creal(clog(sf[0]*sf[4]*sqrt(sf[7]))) + mu_Gex[0];
    mu[1]          = gb[1] + R*T*creal(clog(sf[1]*sf[5]*sqrt(sf[7]))) + mu_Gex[1];
    mu[2]          = gb[2] + R*T*creal(clog(sf[0]*sf[5]*sqrt(sf[7]))) + mu_Gex[2];
    mu[3]          = gb[3] + R*T*creal(clog(1.4141999999999999*sf[3]*sf[4]*cpow(sf[6], 0.25)*cpow(sf[7], 0.25))) + mu_Gex[3];
    mu[4]          = gb[4] + R*T*creal(clog(1.4141999999999999*sf[2]*sf[4]*cpow(sf[6], 0.25)*cpow(sf[7], 0.25))) + mu_Gex[4];
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_opx(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
    
/**
    Objective function of po
*/
double obj_um_po(unsigned n, const double *x, double *grad, void *SS_ref_db){
    SS_ref *d         = (SS_ref *) SS_ref_db;

    int n_em          = d->n_em;
    double P          = d->P;
    double T          = d->T;
    double R          = d->R;

    double *gb        = d->gb_lvl;
    double *mu_Gex    = d->mu_Gex;
    double *sf        = d->sf;
    double *mu        = d->mu;
    px_um_po(SS_ref_db,x);

    
    sf[0]          = 1.0 - x[0];
    sf[1]          = 1.0*x[0];
    
    
    mu[0]          = gb[0] + R*T*creal(clog(1.4576*cpow(sf[0], 0.875)*cpow(sf[1], 0.125)));
    mu[1]          = gb[1] + R*T*creal(clog(sf[0]));
    
    d->sum_apep = 0.0;
    for (int i = 0; i < n_em; i++){
        d->sum_apep += d->ape[i]*d->p[i];
    }
    d->factor = d->fbc/d->sum_apep;

    d->df_raw = 0.0;
    for (int i = 0; i < n_em; i++){
        d->df_raw += mu[i]*d->p[i];
    }
    d->df = d->df_raw * d->factor;

    if (grad){
        double *dfx    = d->dfx;
        double **dp_dx = d->dp_dx;
        dpdx_um_po(SS_ref_db,x);
        for (int i = 0; i < (d->n_xeos); i++){
            dfx[i] = 0.0;
            for (int j = 0; j < n_em; j++){
                dfx[i] += (mu[j] - (d->ape[j]/d->sum_apep)*d->df_raw)*d->factor*dp_dx[j][i];
            }
            grad[i] = creal(dfx[i]);
        }
    }

    return d->df;
}
