SS_ref NLopt_opt_ev_fluid_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_fluid, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, fluid_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_fluid(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_ol_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_ol, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, ol_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_ol(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_br_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_br, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, br_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_br(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_ch_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_ch, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, ch_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_ch(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_atg_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_atg, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, atg_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_atg(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_g_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_g, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, g_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_g(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_ta_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_ta, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, ta_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_ta(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_chl_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_chl, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, chl_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_chl(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_anth_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_anth, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, anth_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_anth(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_spi_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_spi, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, spi_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_spi(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_opx_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_opx, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, opx_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_opx(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
SS_ref NLopt_opt_ev_po_function(global_variable gv, SS_ref SS_ref_db){
    
    int    n_em     = SS_ref_db.n_em;
    unsigned int n  = SS_ref_db.n_xeos;
    unsigned int m  = SS_ref_db.n_sf;
    
    double *x  = SS_ref_db.iguess; 
    
    for (int i = 0; i < (SS_ref_db.n_xeos); i++){
       SS_ref_db.lb[i] = SS_ref_db.bounds[i][0];
       SS_ref_db.ub[i] = SS_ref_db.bounds[i][1];
    }
    
    SS_ref_db.opt = nlopt_create(NLOPT_LD_CCSAQ, (n)); 
    nlopt_set_lower_bounds(SS_ref_db.opt, SS_ref_db.lb);
    nlopt_set_upper_bounds(SS_ref_db.opt, SS_ref_db.ub);
    nlopt_set_min_objective(SS_ref_db.opt, obj_ev_po, &SS_ref_db);
    nlopt_add_inequality_mconstraint(SS_ref_db.opt, m, po_ev_c, NULL, SS_ref_db.tol_sf);
    nlopt_set_ftol_rel(SS_ref_db.opt, gv.obj_tol);
    nlopt_set_maxeval(SS_ref_db.opt, gv.maxeval);
    
    double minf;
    if (gv.maxeval==1){  
       // we are only interested in evaluating the objective function  
       minf = obj_ev_po(n, x, NULL, &SS_ref_db);
    }
    else{
      // do optimization
      SS_ref_db.status = nlopt_optimize(SS_ref_db.opt, x, &minf);
    }
    /* Send back needed local solution parameters */
    for (int i = 0; i < SS_ref_db.n_xeos; i++){
       SS_ref_db.xeos[i] = x[i];
    }
    
    SS_ref_db.df   = minf;
    nlopt_destroy(SS_ref_db.opt);
    
    return SS_ref_db;
};
