/**
    Inequality constraints for fluid
*/
void fluid_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + -1.0*x[0]);
    result[1] = ( eps_sf + x[0] - 1.0);

    if (grad) {
        grad[0] = -1.00000000000000;
        grad[1] = 1.00000000000000;
    }

    return;
};

/**
    Inequality constraints for ol
*/
void ol_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + x[0] - 1.0);
    result[1] = ( eps_sf + -1.0*x[0]);

    if (grad) {
        grad[0] = 1.00000000000000;
        grad[1] = -1.00000000000000;
    }

    return;
};

/**
    Inequality constraints for br
*/
void br_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + x[0] - 1.0);
    result[1] = ( eps_sf + -1.0*x[0]);

    if (grad) {
        grad[0] = 1.00000000000000;
        grad[1] = -1.00000000000000;
    }

    return;
};

/**
    Inequality constraints for ch
*/
void ch_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + x[0] - 1.0);
    result[1] = ( eps_sf + -1.0*x[0]);

    if (grad) {
        grad[0] = 1.00000000000000;
        grad[1] = -1.00000000000000;
    }

    return;
};

/**
    Inequality constraints for atg
*/
void atg_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + -1.0*x[0]*x[1] - 1.0*x[0]*x[2] + x[0] + x[1]*x[3] + x[1] + x[2]*x[3] + x[2] - 1.0*x[3] - 1.0);
    result[1] = ( eps_sf + x[0]*x[1] + x[0]*x[2] - 1.0*x[0] - 1.0*x[1]*x[3] - 1.0*x[2]*x[3] + x[3]);
    result[2] = ( eps_sf + -1.0*x[2]);
    result[3] = ( eps_sf + -1.0*x[1]);
    result[4] = ( eps_sf + x[0] - 0.5*x[1]*x[3] - 0.5*x[2]*x[3] + 0.5*x[3] - 1.0);
    result[5] = ( eps_sf + -1.0*x[0] + 0.5*x[1]*x[3] + 0.5*x[2]*x[3] - 0.5*x[3]);
    result[6] = ( eps_sf + 0.5*x[1] + 0.5*x[2] - 1.0);
    result[7] = ( eps_sf + -0.5*x[1] - 0.5*x[2]);

    if (grad) {
        grad[0] = -1.0*x[1] - 1.0*x[2] + 1.0;
        grad[1] = -1.0*x[0] + x[3] + 1.0;
        grad[2] = -1.0*x[0] + x[3] + 1.0;
        grad[3] = x[1] + x[2] - 1.0;
        grad[4] = x[1] + x[2] - 1.0;
        grad[5] = x[0] - 1.0*x[3];
        grad[6] = x[0] - 1.0*x[3];
        grad[7] = -1.0*x[1] - 1.0*x[2] + 1.0;
        grad[8] = 0.0;
        grad[9] = 0.0;
        grad[10] = -1.00000000000000;
        grad[11] = 0.0;
        grad[12] = 0.0;
        grad[13] = -1.00000000000000;
        grad[14] = 0.0;
        grad[15] = 0.0;
        grad[16] = 1.00000000000000;
        grad[17] = -0.5*x[3];
        grad[18] = -0.5*x[3];
        grad[19] = -0.5*x[1] - 0.5*x[2] + 0.5;
        grad[20] = -1.00000000000000;
        grad[21] = 0.5*x[3];
        grad[22] = 0.5*x[3];
        grad[23] = 0.5*x[1] + 0.5*x[2] - 0.5;
        grad[24] = 0.0;
        grad[25] = 0.500000000000000;
        grad[26] = 0.500000000000000;
        grad[27] = 0.0;
        grad[28] = 0.0;
        grad[29] = -0.500000000000000;
        grad[30] = -0.500000000000000;
        grad[31] = 0.0;
    }

    return;
};

/**
    Inequality constraints for g
*/
void g_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + x[0] - 1.0);
    result[1] = ( eps_sf + -1.0*x[0]);

    if (grad) {
        grad[0] = 1.00000000000000;
        grad[1] = -1.00000000000000;
    }

    return;
};

/**
    Inequality constraints for ta
*/
void ta_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + -1.0*x[0]*x[3] + x[0] + x[3]*x[4] + x[3] - 1.0*x[4] - 1.0);
    result[1] = ( eps_sf + x[0]*x[3] - 1.0*x[0] - 1.0*x[3]*x[4] + x[4]);
    result[2] = ( eps_sf + -1.0*x[3]);
    result[3] = ( eps_sf + -1.0*x[0]*x[1] - 1.0*x[0]*x[2] + x[0] + x[1] + x[2] - 0.5*x[3]*x[4] + 0.5*x[4] - 1.0);
    result[4] = ( eps_sf + x[0]*x[1] + x[0]*x[2] - 1.0*x[0] + 0.5*x[3]*x[4] - 0.5*x[4]);
    result[5] = ( eps_sf + -1.0*x[2]);
    result[6] = ( eps_sf + -1.0*x[1]);
    result[7] = ( eps_sf + x[1] + x[2] - 1.0*x[3] - 1.0);
    result[8] = ( eps_sf + -1.0*x[1] - 1.0*x[2] + x[3]);

    if (grad) {
        grad[0] = 1.0 - 1.0*x[3];
        grad[1] = 0.0;
        grad[2] = 0.0;
        grad[3] = -1.0*x[0] + x[4] + 1.0;
        grad[4] = x[3] - 1.0;
        grad[5] = x[3] - 1.0;
        grad[6] = 0.0;
        grad[7] = 0.0;
        grad[8] = x[0] - 1.0*x[4];
        grad[9] = 1.0 - 1.0*x[3];
        grad[10] = 0.0;
        grad[11] = 0.0;
        grad[12] = 0.0;
        grad[13] = -1.00000000000000;
        grad[14] = 0.0;
        grad[15] = -1.0*x[1] - 1.0*x[2] + 1.0;
        grad[16] = 1.0 - 1.0*x[0];
        grad[17] = 1.0 - 1.0*x[0];
        grad[18] = -0.5*x[4];
        grad[19] = 0.5 - 0.5*x[3];
        grad[20] = x[1] + x[2] - 1.0;
        grad[21] = x[0];
        grad[22] = x[0];
        grad[23] = 0.5*x[4];
        grad[24] = 0.5*x[3] - 0.5;
        grad[25] = 0.0;
        grad[26] = 0.0;
        grad[27] = -1.00000000000000;
        grad[28] = 0.0;
        grad[29] = 0.0;
        grad[30] = 0.0;
        grad[31] = -1.00000000000000;
        grad[32] = 0.0;
        grad[33] = 0.0;
        grad[34] = 0.0;
        grad[35] = 0.0;
        grad[36] = 1.00000000000000;
        grad[37] = 1.00000000000000;
        grad[38] = -1.00000000000000;
        grad[39] = 0.0;
        grad[40] = 0.0;
        grad[41] = -1.00000000000000;
        grad[42] = -1.00000000000000;
        grad[43] = 1.00000000000000;
        grad[44] = 0.0;
    }

    return;
};

/**
    Inequality constraints for chl
*/
void chl_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + -1.0*x[0]*x[1] - 1.0*x[0]*x[3] + x[0]*x[4] + x[0] + x[1]*x[5] + x[1] + x[3]*x[5] + x[3] - 1.0*x[4]*x[5] - 1.0*x[4] - 1.0*x[5] - 1.0);
    result[1] = ( eps_sf + -1.0*x[3]);
    result[2] = ( eps_sf + x[0]*x[1] + x[0]*x[3] - 1.0*x[0]*x[4] - 1.0*x[0] - 1.0*x[1]*x[5] - 1.0*x[3]*x[5] + x[4]*x[5] + x[5]);
    result[3] = ( eps_sf + -1.0*x[1] + x[4]);
    result[4] = ( eps_sf + -1.0*x[0]*x[3] + x[0] - 0.25*x[1]*x[5] - 0.25*x[1]*x[6] - 0.25*x[2]*x[6] - 0.25*x[3]*x[5] + x[3] + 0.25*x[4]*x[5] - 0.25*x[4]*x[6] + 0.25*x[5] + 0.25*x[6] - 1.0);
    result[5] = ( eps_sf + -1.0*x[3]);
    result[6] = ( eps_sf + x[0]*x[3] - 1.0*x[0] + 0.25*x[1]*x[5] + 0.25*x[1]*x[6] + 0.25*x[2]*x[6] + 0.25*x[3]*x[5] - 0.25*x[4]*x[5] + 0.25*x[4]*x[6] - 0.25*x[5] - 0.25*x[6]);
    result[7] = ( eps_sf + -1.0*x[0]*x[1] - 1.0*x[0]*x[2] - 1.0*x[0]*x[4] + x[0] + x[1]*x[6] + x[1] + x[2]*x[6] + x[2] + x[4]*x[6] + x[4] - 1.0*x[6] - 1.0);
    result[8] = ( eps_sf + x[0]*x[1] + x[0]*x[2] + x[0]*x[4] - 1.0*x[0] - 1.0*x[1]*x[6] - 1.0*x[2]*x[6] - 1.0*x[4]*x[6] + x[6]);
    result[9] = ( eps_sf + -1.0*x[2]);
    result[10] = ( eps_sf + -1.0*x[1] - 1.0*x[4]);
    result[11] = ( eps_sf + x[1] + 0.5*x[2] - 1.0);
    result[12] = ( eps_sf + -1.0*x[1] - 0.5*x[2]);

    if (grad) {
        grad[0] = -1.0*x[1] - 1.0*x[3] + x[4] + 1.0;
        grad[1] = -1.0*x[0] + x[5] + 1.0;
        grad[2] = 0.0;
        grad[3] = -1.0*x[0] + x[5] + 1.0;
        grad[4] = x[0] - 1.0*x[5] - 1.0;
        grad[5] = x[1] + x[3] - 1.0*x[4] - 1.0;
        grad[6] = 0.0;
        grad[7] = 0.0;
        grad[8] = 0.0;
        grad[9] = 0.0;
        grad[10] = -1.00000000000000;
        grad[11] = 0.0;
        grad[12] = 0.0;
        grad[13] = 0.0;
        grad[14] = x[1] + x[3] - 1.0*x[4] - 1.0;
        grad[15] = x[0] - 1.0*x[5];
        grad[16] = 0.0;
        grad[17] = x[0] - 1.0*x[5];
        grad[18] = -1.0*x[0] + x[5];
        grad[19] = -1.0*x[1] - 1.0*x[3] + x[4] + 1.0;
        grad[20] = 0.0;
        grad[21] = 0.0;
        grad[22] = -1.00000000000000;
        grad[23] = 0.0;
        grad[24] = 0.0;
        grad[25] = 1.00000000000000;
        grad[26] = 0.0;
        grad[27] = 0.0;
        grad[28] = 1.0 - 1.0*x[3];
        grad[29] = -0.25*x[5] - 0.25*x[6];
        grad[30] = -0.25*x[6];
        grad[31] = -1.0*x[0] - 0.25*x[5] + 1.0;
        grad[32] = 0.25*x[5] - 0.25*x[6];
        grad[33] = -0.25*x[1] - 0.25*x[3] + 0.25*x[4] + 0.25;
        grad[34] = -0.25*x[1] - 0.25*x[2] - 0.25*x[4] + 0.25;
        grad[35] = 0.0;
        grad[36] = 0.0;
        grad[37] = 0.0;
        grad[38] = -1.00000000000000;
        grad[39] = 0.0;
        grad[40] = 0.0;
        grad[41] = 0.0;
        grad[42] = x[3] - 1.0;
        grad[43] = 0.25*x[5] + 0.25*x[6];
        grad[44] = 0.25*x[6];
        grad[45] = x[0] + 0.25*x[5];
        grad[46] = -0.25*x[5] + 0.25*x[6];
        grad[47] = 0.25*x[1] + 0.25*x[3] - 0.25*x[4] - 0.25;
        grad[48] = 0.25*x[1] + 0.25*x[2] + 0.25*x[4] - 0.25;
        grad[49] = -1.0*x[1] - 1.0*x[2] - 1.0*x[4] + 1.0;
        grad[50] = -1.0*x[0] + x[6] + 1.0;
        grad[51] = -1.0*x[0] + x[6] + 1.0;
        grad[52] = 0.0;
        grad[53] = -1.0*x[0] + x[6] + 1.0;
        grad[54] = 0.0;
        grad[55] = x[1] + x[2] + x[4] - 1.0;
        grad[56] = x[1] + x[2] + x[4] - 1.0;
        grad[57] = x[0] - 1.0*x[6];
        grad[58] = x[0] - 1.0*x[6];
        grad[59] = 0.0;
        grad[60] = x[0] - 1.0*x[6];
        grad[61] = 0.0;
        grad[62] = -1.0*x[1] - 1.0*x[2] - 1.0*x[4] + 1.0;
        grad[63] = 0.0;
        grad[64] = 0.0;
        grad[65] = -1.00000000000000;
        grad[66] = 0.0;
        grad[67] = 0.0;
        grad[68] = 0.0;
        grad[69] = 0.0;
        grad[70] = 0.0;
        grad[71] = -1.00000000000000;
        grad[72] = 0.0;
        grad[73] = 0.0;
        grad[74] = -1.00000000000000;
        grad[75] = 0.0;
        grad[76] = 0.0;
        grad[77] = 0.0;
        grad[78] = 1.00000000000000;
        grad[79] = 0.500000000000000;
        grad[80] = 0.0;
        grad[81] = 0.0;
        grad[82] = 0.0;
        grad[83] = 0.0;
        grad[84] = 0.0;
        grad[85] = -1.00000000000000;
        grad[86] = -0.500000000000000;
        grad[87] = 0.0;
        grad[88] = 0.0;
        grad[89] = 0.0;
        grad[90] = 0.0;
    }

    return;
};

/**
    Inequality constraints for anth
*/
void anth_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + x[3] - 1.0);
    result[1] = ( eps_sf + -1.0*x[3]);
    result[2] = ( eps_sf + -1.0*x[4]);
    result[3] = ( eps_sf + -1.0*x[2]);
    result[4] = ( eps_sf + -1.0*x[0]*x[2] - 1.0*x[0]*x[4] + x[0] - 1.0*x[1]*x[6] + x[2] + x[4] + 1.5*x[5] + x[6] - 1.0);
    result[5] = ( eps_sf + x[0]*x[2] + x[0]*x[4] - 1.0*x[0] + x[1]*x[6] - 1.5*x[5] - 1.0*x[6]);
    result[6] = ( eps_sf + x[0] - 1.0*x[5] - 1.0);
    result[7] = ( eps_sf + -1.0*x[0] + x[5]);
    result[8] = ( eps_sf + -1.0*x[1]);
    result[9] = ( eps_sf + -1.0*x[0]*x[1] + x[0] + x[1]*x[6] + x[1] - 1.0*x[6] - 1.0);
    result[10] = ( eps_sf + x[0]*x[1] - 1.0*x[0] - 1.0*x[1]*x[6] + x[6]);
    result[11] = ( eps_sf + -0.5*x[1] + 0.5*x[2] - 0.25*x[3]);
    result[12] = ( eps_sf + 0.5*x[1] - 0.5*x[2] + 0.25*x[3] - 1.0);

    if (grad) {
        grad[0] = 0.0;
        grad[1] = 0.0;
        grad[2] = 0.0;
        grad[3] = 1.00000000000000;
        grad[4] = 0.0;
        grad[5] = 0.0;
        grad[6] = 0.0;
        grad[7] = 0.0;
        grad[8] = 0.0;
        grad[9] = 0.0;
        grad[10] = -1.00000000000000;
        grad[11] = 0.0;
        grad[12] = 0.0;
        grad[13] = 0.0;
        grad[14] = 0.0;
        grad[15] = 0.0;
        grad[16] = 0.0;
        grad[17] = 0.0;
        grad[18] = -1.00000000000000;
        grad[19] = 0.0;
        grad[20] = 0.0;
        grad[21] = 0.0;
        grad[22] = 0.0;
        grad[23] = -1.00000000000000;
        grad[24] = 0.0;
        grad[25] = 0.0;
        grad[26] = 0.0;
        grad[27] = 0.0;
        grad[28] = -1.0*x[2] - 1.0*x[4] + 1.0;
        grad[29] = -1.0*x[6];
        grad[30] = 1.0 - 1.0*x[0];
        grad[31] = 0.0;
        grad[32] = 1.0 - 1.0*x[0];
        grad[33] = 1.50000000000000;
        grad[34] = 1.0 - 1.0*x[1];
        grad[35] = x[2] + x[4] - 1.0;
        grad[36] = x[6];
        grad[37] = x[0];
        grad[38] = 0.0;
        grad[39] = x[0];
        grad[40] = -1.50000000000000;
        grad[41] = x[1] - 1.0;
        grad[42] = 1.00000000000000;
        grad[43] = 0.0;
        grad[44] = 0.0;
        grad[45] = 0.0;
        grad[46] = 0.0;
        grad[47] = -1.00000000000000;
        grad[48] = 0.0;
        grad[49] = -1.00000000000000;
        grad[50] = 0.0;
        grad[51] = 0.0;
        grad[52] = 0.0;
        grad[53] = 0.0;
        grad[54] = 1.00000000000000;
        grad[55] = 0.0;
        grad[56] = 0.0;
        grad[57] = -1.00000000000000;
        grad[58] = 0.0;
        grad[59] = 0.0;
        grad[60] = 0.0;
        grad[61] = 0.0;
        grad[62] = 0.0;
        grad[63] = 1.0 - 1.0*x[1];
        grad[64] = -1.0*x[0] + x[6] + 1.0;
        grad[65] = 0.0;
        grad[66] = 0.0;
        grad[67] = 0.0;
        grad[68] = 0.0;
        grad[69] = x[1] - 1.0;
        grad[70] = x[1] - 1.0;
        grad[71] = x[0] - 1.0*x[6];
        grad[72] = 0.0;
        grad[73] = 0.0;
        grad[74] = 0.0;
        grad[75] = 0.0;
        grad[76] = 1.0 - 1.0*x[1];
        grad[77] = 0.0;
        grad[78] = -0.500000000000000;
        grad[79] = 0.500000000000000;
        grad[80] = -0.250000000000000;
        grad[81] = 0.0;
        grad[82] = 0.0;
        grad[83] = 0.0;
        grad[84] = 0.0;
        grad[85] = 0.500000000000000;
        grad[86] = -0.500000000000000;
        grad[87] = 0.250000000000000;
        grad[88] = 0.0;
        grad[89] = 0.0;
        grad[90] = 0.0;
    }

    return;
};

/**
    Inequality constraints for spi
*/
void spi_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + -1.0*x[1]);
    result[1] = ( eps_sf + x[1] - 1.0);
    result[2] = ( eps_sf + x[0] - 1.0);
    result[3] = ( eps_sf + -1.0*x[0]);

    if (grad) {
        grad[0] = 0.0;
        grad[1] = -1.00000000000000;
        grad[2] = 0.0;
        grad[3] = 1.00000000000000;
        grad[4] = 1.00000000000000;
        grad[5] = 0.0;
        grad[6] = -1.00000000000000;
        grad[7] = 0.0;
    }

    return;
};

/**
    Inequality constraints for opx
*/
void opx_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + -1.0*x[0]*x[1] - 1.0*x[0]*x[2] + x[0] + x[1] + x[2] - 0.5*x[3] - 1.0);
    result[1] = ( eps_sf + x[0]*x[1] + x[0]*x[2] - 1.0*x[0] + 0.5*x[3]);
    result[2] = ( eps_sf + -1.0*x[2]);
    result[3] = ( eps_sf + -1.0*x[1]);
    result[4] = ( eps_sf + x[0] + 0.5*x[3] - 1.0);
    result[5] = ( eps_sf + -1.0*x[0] - 0.5*x[3]);
    result[6] = ( eps_sf + -0.5*x[1] - 0.5*x[2]);
    result[7] = ( eps_sf + 0.5*x[1] + 0.5*x[2] - 1.0);

    if (grad) {
        grad[0] = -1.0*x[1] - 1.0*x[2] + 1.0;
        grad[1] = 1.0 - 1.0*x[0];
        grad[2] = 1.0 - 1.0*x[0];
        grad[3] = -0.500000000000000;
        grad[4] = x[1] + x[2] - 1.0;
        grad[5] = x[0];
        grad[6] = x[0];
        grad[7] = 0.500000000000000;
        grad[8] = 0.0;
        grad[9] = 0.0;
        grad[10] = -1.00000000000000;
        grad[11] = 0.0;
        grad[12] = 0.0;
        grad[13] = -1.00000000000000;
        grad[14] = 0.0;
        grad[15] = 0.0;
        grad[16] = 1.00000000000000;
        grad[17] = 0.0;
        grad[18] = 0.0;
        grad[19] = 0.500000000000000;
        grad[20] = -1.00000000000000;
        grad[21] = 0.0;
        grad[22] = 0.0;
        grad[23] = -0.500000000000000;
        grad[24] = 0.0;
        grad[25] = -0.500000000000000;
        grad[26] = -0.500000000000000;
        grad[27] = 0.0;
        grad[28] = 0.0;
        grad[29] = 0.500000000000000;
        grad[30] = 0.500000000000000;
        grad[31] = 0.0;
    }

    return;
};

/**
    Inequality constraints for po
*/
void po_um_c(unsigned m, double *result, unsigned n, const double *x, double *grad, void *data){
    result[0] = ( eps_sf + x[0] - 1.0);
    result[1] = ( eps_sf + -1.0*x[0]);

    if (grad) {
        grad[0] = 1.00000000000000;
        grad[1] = -1.00000000000000;
    }

    return;
};

